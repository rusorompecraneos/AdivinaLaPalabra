#include <iostream>
#include <string>
#include <vector>
#include <list>

using namespace std;

// CLASE PRINCIPAL 
class AdivinaPalabra{

    // ATRIBUTOS 
    string nombre;
    string categorias;
    string desarrollador;
    string plataforma; 
    string juegoMasJugado;
    int anioLanzamiento;
    int cantidadDeJugadores;
    int tiempoDeJuego; 

    
    
    // CONSTRUCTOR VACIO 
    AdivinaPalabra(){}  

    // SET
    void setnombre(string nombre){
        this->nombre = nombre;
    }
    void setcategoria(string categorias){
        this->categorias = categorias;
    }
    void setdesarrollador(string desarrollador){
        this->desarrollador = desarrollador;
    }
    void setplataforma(string plataforma){
        this->plataforma = plataforma;
    }
    void setjuegoMasJugado(string juegoMasJugado){
        this->juegoMasJugado = juegoMasJugado;
    }
    void setanioLanzamiento(int anioLanzamiento){
        this->anioLanzamiento = anioLanzamiento;
    }
    void setcantidadJugadores(int cantidadDeJugadores){
        this->cantidadDeJugadores = cantidadDeJugadores;
    }
    void settiempoDeJuego(int tiempoDeJuego){
        this->tiempoDeJuego = tiempoDeJuego;
    }
    

    // GET 
    string getnombre(){
        return nombre;
    }
    string getcategorias(){
        return categorias;
    }
    string getdesarrollador(){
        return desarrollador;
    }
    string getplataforma(){
        return plataforma;
    }
    string getjuegoMasJugado(){
        return juegoMasJugado;
    }
    int getanioLanzamiento(){
        return anioLanzamiento;
    }
    int getcantidadDeJugadores(){
        return cantidadDeJugadores;
    }
    int gettiempoDeJuego(){
        return timepoDeJuego;
    }


    // FUNCIONES 
    void JugarAdivinaPalabra();
    void AgregarAColeccion();  
    string AsignarCategoria();   
    string PorTitulo(); 
    string PorPlataforma();
    int PorAnioLanzamiento();
    void OrdenadorJuegoMasJugado();
    void OrdenadorTiempoDeJuego();
    void OrdenadorNombreJugador();

    };

    // Crear el juego 
    void AdivinaPalabra :: JugarAdivinaPalabra(){
    string pistaAleatoria(vector<string>& pistas){
        int general = rand() % pistas.size();
        return pistas[general];
    }
    bool confirmarPalabra(const string& pista, const string& palabra){
        if (pista == "permite acceder a información de manera ordenada a través de campos clave" && palabra == "multilistas" ){
            return true; 
        } else if ( pista == "Que una clase hija tome los atributos y métodos de otra clase" && palabra == "herencia" ){
            return true; 
        } else if (pista == "También es llamado vector" && palabra == "arreglos"){
            return true;
        } else if (pista == "Es una variable que almacena la dirección de memoria de un objeto" && palabra == "puntero"){
            return true; 
        } else if (pista == "Mecanismo extensible para agregar información declarativa o datos de código" && palabra == "atributos"){
            return true;
        } else {
            return false;
        }
    }
    int main(){
        string palabra
        string pista = pistaAleatoria(pistas); 
        cout << "PISTA: \n" ; 
        cin >> pista; 
        cout << " Escribe la palabra correcta: \n " ; 
        cin >> palabra;

        if (confirmarPalabra(pista, palabra)){
            cout << " Respuesta correcta. " << endl; 
        } else {
            cout << " Respuesta incorrecta. " << endl;
        }
        return 0;
    }
    }


    // Ordenar por coleccion 
    void AdivinaPalabra::AgregarAColeccion(){
        list<string> coleccionDeFavoritos;
    string opcionUsuario;

        cout << " Indique el número del videojuego que quiere agregar a la colección: \n" << endl;
        cout << "1. Adivina palabra. " << endl;
        cout << "2. Adivina animal. " << endl;
        cout << "3. Adivina profesion. " << endl;
        cin >> opcionUsuario;

        coleccionDeFavoritos.push_back(opcionUsuario);

        cout << " La colección de favoritos es:  " << coleccionDeFavoritos.size  << "." << endl;
    }

    // Ordenar por categoria
    string AdivinaPalabra:: AsignarCategoria(){
        int opcionDeCategoria;
        list<string> categorias;
        categorias = {"Principiante", "Normal", "Profesional"};

        cout << " Elige la categoria que quieres jugar: \n 1. Principiante \n 2. Normal \n 3. Profesional " << endl;
        cin >> opcionDeCategoria;

    }

    // Ordenar por titulo 
    string AdivinaPalabra::PorTitulo(){
        bool comparacionDeTitulo(const AdivinaPalabra& v1, const AdivinaPalabra& v2){
            return v1.getnombre() < v2.getnombre();
        }
        void OrdenarPorTitulo(vector<AdivinaPalabra>& juegos){
            sort(juegos.begin(), juegos.end(), comparacionDeTitulo);
        }
        int main(){
            vector<AdivinaPalabra> juegos; 
            juegos.push_back(AdivinaPalabra("AdivinaPalabra"));
            juegos.push_back(AdivinaPalabra("AdivinaAnimal"));
            juegos.push_back(AdivinaPalabra("AdivinaProfesion"));

            OrdenarPorTitulo(juegos);
            cout << "Los videojuegos ordenados por titulo: " << endl;
            for (const auto& juego : juegos){
                cout << " " << juego.getnombre() << endl;
            }
            return 0;
        }
    }

    // Ordenar por plataforma
    string AdivinaPalabra::PorPlataforma(){
        map<string, set<Juegos>> 
        listaPorPlataforma.sort();
            for (const set<Juegos>& juegos){
                cout << juegos << endl;
            }

    }

    // Ordenar por año de lanzamiento
    int AdivinaPalabra:: PorAnioLanzamiento(){
        map<int, set<Juegos>> 
        listaPorAnioLanzamiento.sort();
            for (const auto& juegos : Juegos){
                listaPorAnioLanzamiento[juego.getAnioLanzamiento()].insert(juego);
            }

    }

    // Ordenar por juego mas usado (FALTA!!!)

    // Ordenar por tiempo de juego (REVISAR!!!!)
    void OrdenadorJuegoMasJugado();
    bool CompararTiempo (const AdivinaPalabra& v1, const AdivinaPalabra& v2){
        return v1.gettiempoDeJuego() < v2.gettiempoDeJuego(); 
    }
    void ordenarJuegoPorTiempo(vector<AdivinaPalabra>& juegos){
        sort(juegos.begin(), juegos.end(), CompararPorTiempo);
    }
    int main(){ // REVISAR!!!!
        int tiempoPalabra; 
        int tiempoAnimal;
        int tiempoProfesion;
        vector<AdivinaPalabra> juegos; 
        cout << "Ingrese el tiempo en minutos de la partida en el juego Adivina la palabra: " ; 
        cin >> tiempoPalabra; 
        cout << "Ingrese el tiempo en minutos de la partida en el juego Adivina el animal: " ; 
        cin >> tiempoProfesion; 
        cout << "Ingrese el tiempo en minutos de la partida en el juego Adivina la profesion: " ; 
        cin >> tiempoAnimal; 

            if (tiempoPalabra < tiempoAnimal < tiempoProfesion){
                cout << "El orden de tiempo de partida en los juegos de menor a mayor es: Adivina la palabra, adivina el animal y adivina la profesión" << endl;    
            } else 


            // PENDIENTE!!!!
        cout << "Los juegos ordenados de menor a mayor tiempo: " << endl; 
            for (const auto& juego : juegos){ 
                cout << " El orden de los juegos " << juego.getnombre() << " es de " << juego.gettiempoDeJuego() << " minutos. " << endl;
            }
        return 0;
    }

    // Ordenar por nombre de jugador (FALTA!!!)


// CLASE HIJA 2 (Adivina la profesion con las pistas de cada uno )
    class AdivinaProfesion : public AdivinaPalabra{
    AdivinaProfesion(){};
        AdivinaPalabra objeto1;
        list<string> listaDeProfesion = {"Médico", "Bombero", "Policía", "Profesor", "Pintor"};
        list<string> listaDePistas = {"Cura a las personas", "Apaga los incendios", "Atrapa a las personas malas y criminales", "Enseña y educa a los niños", "Crea arte en un lienzo";}
        list<pair<string, string>> 
        asociarElementos.sort();
            for (string i=0; i < listaDePistas.size(); i++){
                cout << listaDePistas[i] << "es la pista de" << listaDeProfesion[i] << endl;
            }
            return 0;
    };

    // Funcion 
    void JugarAdivinaProfesion();

    // Crear juego 
        void AdivinaPalabra :: JugarAdivinaProfesion(){
        string pistaAleatoria(vector<string>& pistas){
            int general = rand() % pistas.size();
            return pistas[general];
        }
        bool confirmarPalabra(const string& pista, const string& palabra){
            if (pista == "Cura a las personas" && palabra == "Médico" ){
                return true; 
            } else if ( pista == "Apaga los incendios" && palabra == "Bombero" ){
                return true; 
            } else if (pista == "Atrapa a las personas malas y criminales" && palabra == "Policía"){
                return true;
            } else if (pista == "Enseña y educa a los niños" && palabra == "Profesor"){
                return true; 
            } else if (pista == "Crea arte en un lienzo" && palabra == "Pintor"){
                return true;
            } else {
                return false;
            }
        }
        int main(){
            string palabra
            string pista = pistaAleatoria(pistas); 
            cout << "PISTA: \n" ; 
            cin >> pista; 
            cout << " Escribe la palabra correcta: \n " ; 
            cin >> palabra;

            if (confirmarPalabra(pista, palabra)){
                cout << " Respuesta correcta. " << endl; 
            } else {
                cout << " Respuesta incorrecta. " << endl;
            }
            return 0;
        }
        }



// LISTA MULTILISTA (REVISAR!!!!)
    class ListaMultilista{ 
        private: 
            map<string, vector<AdivinaPalabra>>;
            listaMultilista.sort()
        public:
            void sumarJuegos(const AdivinaPalabra& juego){
                listaMultilista[AdivinaPalabra.getcategorias()].push_back(juego);
            }
            vector<AdivinaPalabra>;
            tenerCategoriaAdivinaPalabra(const string& categorias){
                if (listaMultilisra.find(categorias) != listaMultilista.end()){
                    return listaMultilista[categorias];
                } else {
                    return {};
                }
            }


    }; 
    int main(){
        listaMultilista.ponerJuegos(AdivinaPalabra(AdivinaAnimal));
        listaMultilista.ponerJuegos(AdivinaPalabra(AdivinaProfesion));

        cout << "se eligió el juego: " << AdivinaAnimal << endl;
        vector<AdivinaPalabra> juegoAdivinaAnimal = listaMultilista.tenerCategoriaAdivinaPalabra(AdivinaAnimal);
        for (const auto& juego : juegoAdivinaAnimal){
            cout << " " << juego.getnombre() << endl;
        }
        cout << "se eligió el juego: " << AdivinaProfesion << endl;
        vector<AdivinaPalabra> juegoAdivinaProfesion = listaMultilista.tenerCategoriaAdivinaPalabra(AdivinaProfesion);
        for (const auto& juego : juegoAdivinaProfesion){
            cout << " " << juego.getnombre() << endl;
        }
        return 0;
    };



// MENU 
int main(){
    int opcionDelJugador; 

    do {
        cout << "Menú: \n" << endl; 
        cout << " 1- Adivina la palabra \n" << endl; 
        cout << " 2- Adivina el animal \n" << endl; 
        cout << " 3- Adivina la profesión \n" << endl; 
        cout << " 4- Poner en favoritos \n" << endl; 
        cout << " 5- Salir \n" << endl; 
        cin >> opcionDelJugador; 

        switch (opcionDelJugador) {
            1 case: 
                JugarAdivinaPalabra();
                break;
            2 case: 
                JugarAdivinaAnimal();
                break;
            3 case: 
                JugarAdivinaProfesion ();
                break;
            4 case: {
                string juegoElegido;
                cout << " Nombre del juego que quieres poner en favoritos:  \n " ; 
                cin juegoElegido; 
                hvgughvuihuu (gjrif, juegoElegido);
            }
            5 case: 
                cout << " Saliste del juego." << endl; 
                break;
        }
    } while ( opcionDelJugador != 5); 

    return 0;
}
  


// FALTA EL PUNTO 4 (CRISTIAN) Y REVISAR LO QUE FALTA 

