#include <iostream>
#include <string>
#include <vector>
#include <list>
#include <map>
#include <unordered_map>
#include <algorithm>

using namespace std;

class AdivinaPalabra {
    // Atributos:
    string nombre = "Adivina la Palabra";
    string categorias;
    string desarrollador = "PLay stations";
    string plataforma = "Juegos friv"; 
    string juegoMasJugado;
    int anioLanzamiento = 2023;
    int cantidadDeJugadores;
    int tiempoDeJuego; 

public:
    AdivinaPalabra() {} // Constructor Vacio.

    // Los sets:
    void setnombre(string nombre) {
        this->nombre = nombre;
    }
    void setcantidadJugadores(int cantidadJugadores) {
        this->cantidadJugadores = cantidadJugadores;
    }
    void setdesarrollador(string desarrollador) {
        this->desarrollador = desarrollador;
    }
    void setplataforma(string plataforma) {
        this->plataforma = plataforma;
    }
    void setanioLanzamiento(int anioLanzamiento) {
        this->anioLanzamiento = anioLanzamiento;
    }
    void setcategoria(string categorias) {
        this->categorias = categorias;
    }
    void settiempoDeJuego(int tiempoDeJuego){
        this->tiempoDeJuego = tiempoDeJuego;
    }
    void setjuegoMasJugado(string juegoMasJugado){
        this->juegoMasJugado = juegoMasJugado;
    }

    // Los gets:
    string getnombre() {
        return nombre;
    }
    int getcantidadJugadores() {
        return cantidadJugadores;
    }
    string getdesarrollador() {
        return desarrollador;
    }
    string getplataforma() {
        return plataforma;
    }
    int getanioLanzamiento() {
        return anioLanzamiento;
    }
    string getcategorias() {
        return categorias;
    }
    string getjuegoMasJugado(){
        return juegoMasJugado;
    }
    int gettiempoDeJuego(){
        return tiempoDeJuego;
    }

    // Declaracion de funciones:
    void JugarAdivinaPalabra();
    void AgregarAColeccion();
    string AsignarCategoria();
    string PorTitulo();
    string PorPlataforma();
    string ListaDeFavoritos();  
    int PorAnioLanzamiento();
    void JugarAdivinaProfesion();
    void JugarAdivinaAnimal();
    void CrearMenu();
    void JuegoMasJugado();
    void CantidadDeJugadores();
    void TimepoDeJuego();
    void EjecutarMultilista();


};


//MENU 
    void AdivinaPalabra :: CrearMenu(){
    int opcionDelJugador; 

    do {
        cout << "Menú: \n" << endl; 
        cout << " 1- Adivina la palabra \n" << endl; 
        cout << " 2- Adivina el animal \n" << endl; 
        cout << " 3- Adivina la profesión \n" << endl; 
        cout << " 4- Poner en favoritos \n" << endl; 
        cout << " 5- Buscar videojuego por plataforma " << endl;
        cout << " 6- Buscar videojuego por año de Lanzamiento " << endl;
        cout << " 7- Buscar videojuego por titulo " << endl;
        cout << " 8- Salir \n" << endl; 
        cin >> opcionDelJugador; 

        switch (opcionDelJugador) {
            case 1:
            { 
                JugarAdivinaPalabra();
                break;
            }
            case 2:
            { 
                JugarAdivinaAnimal();              
                break;
            }
            case 3:
            { 
                JugarAdivinaProfesion();
                break;
            }
            case 4: 
            {
                list<string> juegosFavoritos;
                string juegoElegido;
                cout << " Nombre del juego que quieres poner en favoritos:  \n " << endl; 
                cin >> juegoElegido; 
                ListaDeFavoritos (ListaDeFavoritos, juegoElegido);
                break;
            }
            case 5:
            {
                PorPlataforma();
                break;
            }
            case 6:
            {
                PorAnioLanzamiento();
                break;
            }
            case 7:
            {
                PorTitulo();
                break;
            }
            case 8:
            { 
                cout << " Saliste del videojuego. " << endl; 
                break;
            }    
        }
    } 
    while ( opcionDelJugador != 5); // repite el menú hasta que el usuario ingrese la opcion de salir
    return 0;
}



    // Crear el juego
    void AdivinaPalabra :: JugarAdivinaPalabra( ){
    string pistaAleatoria(vector<string>&pistas){
        int general = rand() % pistas.size();
        return pistas[general];
    }
    bool confirmarPalabra(const string &pista, const string& palabra){
        if (pista == "permite acceder a información de manera ordenada a través de campos clave" && palabra == "multilistas" ){
            return true; 
        } else if ( pista == "Que una clase hija tome los atributos y métodos de otra clase" && palabra == "herencia" ){
            return true; 
        } else if (pista == "También es llamado vector" && palabra == "arreglos"){
            return true;
        } else if (pista == "Es una variable que almacena la dirección de memoria de un objeto" && palabra == "puntero"){
            return true; 
        } else if (pista == "Mecanismo extensible para agregar información declarativa o datos de código" && palabra == "atributos"){
            return true;
        } else {
            return false;
        }
    }
        string palabra
        string pista = pistaAleatoria(pistas); 
        cout << "PISTA: \n" ; 
        cin >> pista; 
        cout << " Escribe la palabra correcta: \n " ; 
        cin >> palabra;

        if (confirmarPalabra(pista, palabra)){
            cout << " Respuesta correcta. " << endl; 
        } else {
            cout << " Respuesta incorrecta. " << endl;
        }
        return 0;
    };


// CLASE HIJA 1 (Adivina la profesion)
    class AdivinaProfesion : public AdivinaPalabra{

        // Atributos de la clase hija 1 
        private:
        string nombre = "Adivina la profesion";
        string desarrollador = " Sony ";
        string plataforma = " Steam "; 
        int anioLanzamiento = 2022;

    AdivinaProfesion(){};
        AdivinaPalabra objeto1;
        list<string> listaDeProfesion = {"Médico", "Bombero", "Policía", "Profesor", "Pintor"};
        list<string> listaDePistas = {"Cura a las personas", "Apaga los incendios", "Atrapa a las personas malas y criminales", "Enseña y educa a los niños", "Crea arte en un lienzo";}
        list<pair<string, string>> 
        asociarElementos.sort();
            for (string i=0; i < listaDePistas.size(); i++){
                cout << listaDePistas[i] << "es la pista de" << listaDeProfesion[i] << endl;
            }
            return 0;
    };

    // Funcion 
    void JugarAdivinaProfesion();

    // Crear juego 
        void AdivinaPalabra :: JugarAdivinaProfesion(){
        string pistaAleatoria(vector<string>& pistas){
            int general = rand() % pistas.size();
            return pistas[general];
        }
        bool confirmarPalabra(const string& pista, const string& palabra){
            if (pista == "Cura a las personas" && palabra == "Médico" ){
                return true; 
            } else if ( pista == "Apaga los incendios" && palabra == "Bombero" ){
                return true; 
            } else if (pista == "Atrapa a las personas malas y criminales" && palabra == "Policía"){
                return true;
            } else if (pista == "Enseña y educa a los niños" && palabra == "Profesor"){
                return true; 
            } else if (pista == "Crea arte en un lienzo" && palabra == "Pintor"){
                return true;
            } else {
                return false;
            }
        }
        int main(){
            string palabra
            string pista = pistaAleatoria(pistas); 
            cout << "PISTA: \n" ; 
            cin >> pista; 
            cout << " Escribe la palabra correcta: \n " ; 
            cin >> palabra;

            if (confirmarPalabra(pista, palabra)){
                cout << " Respuesta correcta. " << endl; 
            } else {
                cout << " Respuesta incorrecta. " << endl;
            }
            return 0;
        }
    }


//CLASE HIJA 2 (Adivina el animal)
class AdivinaAnimal : public AdivinaPalabra {

    // Atributos de la clase hija 2 
        private:
        string nombre = "Adivina el animal";
        string desarrollador = "Sony ";
        string plataforma = "juegos.oo"; 
        int anioLanzamiento = 2021;

        // Funcion 
        public:
        JugarAdivinaAnimal();

    list<string> listaAnimales = {"Gato", "Perro", "Caballo", "Leon", "Pinguino"};
    list<string> listaPistas = {"Es un animal domestico, muy reservado", "Es el mejor amigo del hombre", "Es un animal usado en guerras", "Es el rey de la selva", "Es un ave que no vuela"};
    unordered_map<string, string> mapaAnimalesPistas;

public:
    AdivinaAnimal() {
        auto itAnimal = listaAnimales.begin();
        auto itPista = listaPistas.begin();
        while (itAnimal != listaAnimales.end() && itPista != listaPistas.end()) {
            mapaAnimalesPistas[*itAnimal] = *itPista;
            ++itAnimal;
            ++itPista;
        }
    }
    
};
    // Crear juego de la clase hija 2
    JugarAdivinaAnimal(){
        string pistaAleatoria(vector<string>&pistas){
        int general = rand() % pistas.size();
        return pistas[general];
    }
    bool confirmarPalabra(const string &pista, const string& palabra){
        if (pista == "Es un animal domestico, muy reservado" && palabra == "Gato" ){
            return true; 
        } else if ( pista == "Es el mejor amigo del hombre" && palabra == "Perro" ){
            return true; 
        } else if (pista == "Es un animal usado en guerras" && palabra == "Caballo"){
            return true;
        } else if (pista == "Es el rey de la selva" && palabra == "Leon"){
            return true; 
        } else if (pista == "Es un ave que no vuela" && palabra == "Pinguino"){
            return true;
        } else {
            return false;
        }
    }
        string palabra
        string pista = pistaAleatoria(pistas); 
        cout << "PISTA: \n" ; 
        cin >> pista; 
        cout << " Escribe la palabra correcta: \n " ; 
        cin >> palabra;

        if (confirmarPalabra(pista, palabra)){
            cout << " Respuesta correcta. " << endl; 
        } else {
            cout << " Respuesta incorrecta. " << endl;
        }
        return 0;
    }

    
// LISTA MULTILISTA 
    class ListaMultilista{ 
        private: 
            map<string, vector<AdivinaPalabra>>;
            listaMultilista.sort()
        public:
            void EjecutarMultilista();
            void sumarJuegos(const AdivinaPalabra& juego){
                listaMultilista[AdivinaPalabra.getcategorias()].push_back(juego);
            }
            vector<AdivinaPalabra>;
            tenerCategoriaAdivinaPalabra(const string& categorias){
                if (listaMultilisra.find(categorias) != listaMultilista.end()){
                    return listaMultilista[categorias];
                } else {
                    return {};
                }
            }

    }; 
        //Funcion que hace que se ejecute la lista.
        void EjecutarMultilista(){
            listaMultilista.ponerJuegos(AdivinaPalabra(AdivinaAnimal));
            listaMultilista.ponerJuegos(AdivinaPalabra(AdivinaProfesion));

        cout << "se eligió el juego: " << AdivinaAnimal << endl;
        vector<AdivinaPalabra> juegoAdivinaAnimal = listaMultilista.tenerCategoriaAdivinaPalabra(AdivinaAnimal);
        for (const auto& juego : juegoAdivinaAnimal){
            cout << " " << juego.getnombre() << endl;
        }
        cout << "se eligió el juego: " << AdivinaProfesion << endl;
        vector<AdivinaPalabra> juegoAdivinaProfesion = listaMultilista.tenerCategoriaAdivinaPalabra(AdivinaProfesion);
        for (const auto& juego : juegoAdivinaProfesion){
            cout << " " << juego.getnombre() << endl;
        }
        return 0;
} 



// Ordenar tiempo de juego 
void AdivinaPalabra :: TiempoDeJuego(){
    bool CompararTiempo (const AdivinaPalabra& v1, const AdivinaPalabra& v2){
        return v1.gettiempoDeJuego() < v2.gettiempoDeJuego(); 
    }
    void ordenarJuegoPorTiempo(vector<AdivinaPalabra>& juegos){
        sort(juegos.begin(), juegos.end(), CompararPorTiempo);
    }
     // REVISAR!!!!
        int tiempoPalabra; 
        int tiempoAnimal;
        int tiempoProfesion;
        vector<AdivinaPalabra> juegos; 
        cout << "Ingrese el tiempo en minutos de la partida en el juego Adivina la palabra: " ; 
        cin >> tiempoPalabra; 
        cout << "Ingrese el tiempo en minutos de la partida en el juego Adivina el animal: " ; 
        cin >> tiempoProfesion; 
        cout << "Ingrese el tiempo en minutos de la partida en el juego Adivina la profesion: " ; 
        cin >> tiempoAnimal; 

            if (tiempoPalabra < tiempoAnimal < tiempoProfesion){
                cout << "El orden de tiempo de partida en los juegos de menor a mayor es: Adivina la palabra, adivina el animal y adivina la profesión" << endl;    
            } else 


            // PENDIENTE!!!!
        cout << "Los juegos ordenados de menor a mayor tiempo: " << endl; 
            for (const auto& juego : juegos){ 
                cout << " El orden de los juegos " << juego.getnombre() << " es de " << juego.gettiempoDeJuego() << " minutos. " << endl;
            }
        return 0;
}

// Ordenar por juego mas jugado 
void AdivinaPalabra :: JuegoMasJugado(){
    private:
        string nombre;
        int cantidadDeJugadores;
    public:
        Juego(string nom, int jugadores) : nombre(nom), cantidadDeJugadores(jugadores) {}
        string getNombre() const {return nombre}
        int getCantidadDeJugadores() const {return cantidadDeJugadores}

    string juegoMasJugado(const vector<Juego>& juegos) {
        string Jugado;
        int maxJugadores = 0;

        for (const auto& Juego : juegos) {
            if (juego.getCantidadDeJugadores() > maxJugadores) {
                maxJugadores = Juego.getCantidadDeJugadores();
                Jugado = Juego.getNombre();
            }
        }

        return Jugado;
    }
     string juegoMasRepetido = juegoMasJugado(juegos);

        cout << "El juego más jugado es: " << juegoMasRepetido << endl;

        return 0;
    };



// Ordenar por cantidad de jugadores
void AdivinaPalabra :: CantidadDeJugadores(){
    // Atributos:
    private:
        string nombre;
        int cantidadJugadores;
    public:
        Juego(string nom, int jugadores) : nombre(nom), cantidadJugadores(jugadores) {}
        string getNombre() const { return nombre}
        int getCantidadJugadores() const { return cantidadJugadores }
    

    void organizarPorCantidadDeJugadores(const vector<Juego>& juegos) {
        map<string, int> jugadoresPorJuego;

        for (const auto& juego : juegos) {
            jugadoresPorJuego[juego.getNombre()] += juego.getCantidadJugadores();
        }

        cout << "La cantidad de jugadores por juego:" << endl;
        for (const auto& juego : jugadoresPorJuego) {
            cout << " " << juego.first << ": " << juego.second << " jugadores." << endl;
        }
    }
        organizarJuegosPorCantidadJugadores(juegos);

        return 0;
    };


AdivinaPalabra Juegos;
AdivinaPalabra juegos;


// Ordenar por coleccion 
void AdivinaPalabra::AgregarAColeccion(){
    list<string> coleccion;
    string opcionColeccion;

    cout << " Si quieres agregar un videojuego a tu coleccion,\n ingresa el numero del videojuego que quieres agregar a continuacion:" << endl;
    cout << "1. Adivina la palabra" << endl;
    cout << "2. Adivina el animal" << endl;
    cout << "3. Adivina la profesion" << endl;
    cin >> opcionColeccion;

    coleccion.push_back(opcionColeccion);
    cout << "Su nueva coleecion es " << coleccion << endl;

    return opcionColeccion;
}


// Ordenar por categoria             
string AdivinaPalabra::AsignarCategoria(){
    string opcionCategoria;
    list<string> listaJuegos = {"Adivina la palabra", "Adivina el animal", "Adivina la profesion"};
    list<string> categorias = {"Principiante", "Normal", "Profesional"};

    cout << "Por favor escoja su categoria: 1. Principiante  2. Normal  3. Profesional" << endl;
    cin >> opcionCategoria;

    cout << "Su categoria es " << opcionCategoria << endl;

    return opcionCategoria;
}



// Ordenar por titulo 
    string AdivinaPalabra::PorTitulo(){
        bool comparacionDeTitulo(const AdivinaPalabra& v1, const AdivinaPalabra& v2){
            return v1.getnombre() < v2.getnombre();
        }
        void OrdenarPorTitulo(vector<AdivinaPalabra>& juegos){
            sort(juegos.begin(), juegos.end(), comparacionDeTitulo());
        }
        
            vector<AdivinaPalabra> juegos; 
            juegos.push_back(AdivinaPalabra("AdivinaPalabra"));
            juegos.push_back(AdivinaPalabra("AdivinaAnimal"));
            juegos.push_back(AdivinaPalabra("AdivinaProfesion"));

            OrdenarPorTitulo(juegos);
            cout << "Los videojuegos ordenados por titulo: " << endl;
            for (const auto& juego : juegos){
                cout << " " << juego.getnombre() << endl;
            }
            return 0;
        }
    

// Ordenar por año de lanzamiento
int AdivinaPalabra:: PorAnioLanzamiento(){
        map<int, set<Juegos>> 
        listaPorAnioLanzamiento.sort();
            for (const auto& juegos : Juegos){
                PorAnioLanzamiento[juego.getAnioLanzamiento()].insert(Juegos);
            }

    }


// Ordenar por plataforma
string AdivinaPalabra :: PorPlataforma(){
void OrganizarJuegosPorPlataforma(const vector<Juego>& juegos) {
    map<string, vector<string>> PorPlataforma;

    for (const auto& juego : juegos) {
        PorPlataforma[juego.getPlataforma()].push_back(juego.getNombre());
    }

    for (const auto& plataforma : PorPlataforma) {
        cout << "Juegos de la plataforma " << plataforma.first << endl;
        for (const auto& juego : plataforma.second) {
            cout << juego << endl;
        }
        cout << endl;
    }
}
};

int main() {
    vector<Juego> juegos = {
        {"AdivinaPalabra", "juegos friv"},
        {"AdivinaProfesion", "Stream"},
        {"AdivinaAnimal", "juegos.oo"}
    };

    organizarJuegosPorPlataforma(juegos);

    return 0;
}


//Lita de favoritos, como agregarlo y muestra la lista:
    string AdivinaPalabra::listaDeFavoritos(){
    int decisionJugador;
    string decisionFavoritos;
    
    cout << "Para usar el jugador 1, pulsa el numero 1" << endl;
    cout << "Para usar el jugador 2, pulsa el numero 2" << endl;
    cin >> desicionJugador;

    if (decisionJugador == 1){
        cout << "Usted ha seleccionado el jugador uno \n" << endl;

    list<string> listaVideojuegos = {"Adivina la palabra", "Adivina el animal", "Adivina la profesion"};
    unordered_map<string, int> mapaVideojuegos;

    // Asignando valores numéricos a cada string
    int valor = 1;
    for (const auto& videojuego : listaVideojuegos) {
        mapaVideojuegos[videojuego] = valor++;
    }
     cout << "Usted ha seleccionado el jugador uno" << endl;
        cout << "A continuacion indique el nombre de su juego favorito " << endl;
        cout << "1. Adivina la palabra" << endl;
        cout << "2. Adivina el animal" << endl;
        cout << "3. Adivina la profesion" << endl;
        cin >> decisionFavoritos;

    list<string> juegosFavoritos ={};

    juegosFavoritos.push_back(decisionFavoritos);

    cout << "Su nueva coleecion es " << juegosFavoritos << endl;
}
    
    if (decisionJugador == 2){
        cout << "Usted ha seleccionado el jugador dos" << endl;
        cout << "A continuacion indique el nombre de su juego favorito " << endl;
        cout << "1. Adivina la palabra" << endl;
        cout << "2. Adivina el animal" << endl;
        cout << "3. Adivina la profesion" << endl;
        cin >> decisionFavoritos;


    list<string> juegosFavoritos ={};

    juegosFavoritos.push_back(decisiionFavoritos);

    cout << "Su nueva coleecion es " << juegosFavoritos << endl;
}
}

