#include <iostream>
#include <string>
#include <vector>
#include <list>
#include <map>
#include <unordered_map>

using namespace std;

class AdivinaPalabra {
    // Atributos:
    string nombre = "Adivina la Palabra";
    string categorias;
    string desarrollador = "PLay stations";
    string plataforma = "Juegos friv"; 
    string juegoMasJugado;
    int añoLanzamiento = 2023;
    int cantidadJugadores;
    int tiempoDeJuego; 

public:
    AdivinaPalabra() {} // Constructor Vacio.

    // Los sets:
    void setnombre(string nombre) {
        this->nombre = nombre;
    }
    void setcantidadJugadores(int cantidadJugadores) {
        this->cantidadJugadores = cantidadJugadores;
    }
    void setdesarrollador(string desarrollador) {
        this->desarrollador = desarrollador;
    }
    void setplataforma(string plataforma) {
        this->plataforma = plataforma;
    }
    void setañoLanzamiento(int añoLanzamiento) {
        this->añoLanzamiento = añoLanzamiento;
    }
    void setcategoria(string categorias) {
        this->categorias = categorias;
    }
    void settiempoDeJuego(int tiempoDeJuego){
        this->tiempoDeJuego = tiempoDeJuego;
    }
    void setjuegoMasJugado(string juegoMasJugado){
        this->juegoMasJugado = juegoMasJugado;
    }

    // Los gets:
    string getnombre() {
        return nombre;
    }
    int getcantidadJugadores() {
        return cantidadJugadores;
    }
    string getdesarrollador() {
        return desarrollador;
    }
    string getplataforma() {
        return plataforma;
    }
    int getañoLanzamiento() {
        return añoLanzamiento;
    }
    string getcategorias() {
        return categorias;
    }
    string getjuegoMasJugado(){
        return juegoMasJugado;
    }
    int gettiempoDeJuego(){
        return tiempoDeJuego;
    }

    // Declaracion de funciones:
    void jugarAdivinaPalabra();
    void AgregarAColeccion();
    string AsignarCategoria();
    string PorTitulo();
    int PorAñoLanzamiento();
    string PorPlataforma();
    void JugarAdivinaProfesion();
    void ejecutarMenu();
    string listaDeFavoritos();
    void OrdenadorJuegoMasJugado();


};

//CLASE HIJA 2 (Adivina el animal)
class AdivinaAnimal : public AdivinaPalabra {

    //Nuevos atributos:
        private:
        string nombre = "Adivina el animal";
        int añoLanzamiento = 2021;
        string desarrollador = "Sony ";
        string plataforma = "juegos.oo"; 

        public:
        ejecutarJuegoAnimal();

    list<string> listaAnimales = {"Gato", "Perro", "Caballo", "Leon", "Pinguino"};
    list<string> listaPistas = {"Es un animal domestico, muy reservado", "Es el mejor amigo del hombre", "Es un animal usado en guerras", "Es el rey de la selva", "Es un ave que no vuela"};
    unordered_map<string, string> mapaAnimalesPistas;

public:
    AdivinaAnimal() {
        auto itAnimal = listaAnimales.begin();
        auto itPista = listaPistas.begin();
        while (itAnimal != listaAnimales.end() && itPista != listaPistas.end()) {
            mapaAnimalesPistas[*itAnimal] = *itPista;
            ++itAnimal;
            ++itPista;
        }
    }
    
};

    ejecutarJuegoAnimal(){
        string pistaAleatoria(vector<string>&pistas){
        int general = rand() % pistas.size();
        return pistas[general];
    }
    bool confirmarPalabra(const string &pista, const string& palabra){
        if (pista == "Es un animal domestico, muy reservado" && palabra == "Gato" ){
            return true; 
        } else if ( pista == "Es el mejor amigo del hombre" && palabra == "Perro" ){
            return true; 
        } else if (pista == "Es un animal usado en guerras" && palabra == "Caballo"){
            return true;
        } else if (pista == "Es el rey de la selva" && palabra == "Leon"){
            return true; 
        } else if (pista == "Es un ave que no vuela" && palabra == "pinguino"){
            return true;
        } else {
            return false;
        }
    }
        string palabra
        string pista = pistaAleatoria(pistas); 
        cout << "PISTA: \n" ; 
        cin >> pista; 
        cout << " Escribe la palabra correcta: \n " ; 
        cin >> palabra;

        if (confirmarPalabra(pista, palabra)){
            cout << " Respuesta correcta. " << endl; 
        } else {
            cout << " Respuesta incorrecta. " << endl;
        }
        return 0;
    }

AdivinaPalabra Juegos;
AdivinaPalabra juegos;

void AdivinaPalabra::AgregarAColeccion(){
    list<string> coleccion;
    string desicionUsuario;

    cout << "Bienvenido, a su coleccion de videojuegos, si desea agregar un videojuego a su coleccion,\n indique el numero del videojuego que desea agregar a continuacion:" << endl;
    cout << "1. Adivina la palabra" << endl;
    cout << "2. Adivina el animal" << endl;
    cout << "3. Adivina la profesion" << endl;
    cin >> desicionUsuario;

    coleccion.push_back(desicionUsuario);

    cout << "Su nueva coleecion es " << coleccion << endl;
}

string AdivinaPalabra::AsignarCategoria(){
    string desicionCategoria;
    list<string> listaJuegos = {"Adivina la palabra", "Adivina el animal", "Adivina la profesion"};
    list<string> categorias = {"Principiante", "Amateur", "Profesional"};

    cout << "Por favor escoja su categoria: 1. Principiante  2. Amateur  3. Profesional" << endl;
    cin >> desicionCategoria;

    cout << "Su categoria es " << desicionCategoria << endl;

    return desicionCategoria;
}

 // Crear el juego
void AdivinaPalabra::jugarAdivinaPalabra(){
    
    void AdivinaPalabra :: JugarAdivinaPalabra( ){
    string pistaAleatoria(vector<string>&pistas){
        int general = rand() % pistas.size();
        return pistas[general];
    }
    bool confirmarPalabra(const string &pista, const string& palabra){
        if (pista == "permite acceder a información de manera ordenada a través de campos clave" && palabra == "multilistas" ){
            return true; 
        } else if ( pista == "Que una clase hija tome los atributos y métodos de otra clase" && palabra == "herencia" ){
            return true; 
        } else if (pista == "También es llamado vector" && palabra == "arreglos"){
            return true;
        } else if (pista == "Es una variable que almacena la dirección de memoria de un objeto" && palabra == "puntero"){
            return true; 
        } else if (pista == "Mecanismo extensible para agregar información declarativa o datos de código" && palabra == "atributos"){
            return true;
        } else {
            return false;
        }
    }
        string palabra
        string pista = pistaAleatoria(pistas); 
        cout << "PISTA: \n" ; 
        cin >> pista; 
        cout << " Escribe la palabra correcta: \n " ; 
        cin >> palabra;

        if (confirmarPalabra(pista, palabra)){
            cout << " Respuesta correcta. " << endl; 
        } else {
            cout << " Respuesta incorrecta. " << endl;
        }
        return 0;
    }
    }


// Ordenar por titulo 
    string AdivinaPalabra::PorTitulo(){
        bool comparacionDeTitulo(const AdivinaPalabra& v1, const AdivinaPalabra& v2){
            return v1.getnombre() < v2.getnombre();
        }
        void OrdenarPorTitulo(vector<AdivinaPalabra>& juegos){
            sort(juegos.begin(), juegos.end(), comparacionDeTitulo());
        }
        
            vector<AdivinaPalabra> juegos; 
            juegos.push_back(AdivinaPalabra("AdivinaPalabra"));
            juegos.push_back(AdivinaPalabra("AdivinaAnimal"));
            juegos.push_back(AdivinaPalabra("AdivinaProfesion"));

            OrdenarPorTitulo(juegos);
            cout << "Los videojuegos ordenados por titulo: " << endl;
            for (const auto& juego : juegos){
                cout << " " << juego.getnombre() << endl;
            }
            return 0;
        }
    
//Funcion para ordenar por año de lanzamiento
int AdivinaPalabra:: PorAñoLanzamiento(){
        map<int, set<Juegos>> 
        listaPorAñoLanzamiento.sort();
            for (const auto& juegos : Juegos){
                listaPorAñoLanzamiento[juego.getAnioLanzamiento()].insert(Juegos);
            }

    }
// Funcion para ordenar por plataforma
    string AdivinaPalabra::PorPlataforma(){
        map<string, set<Juegos>> 
        listaPorPlataforma.sort();
            for (const set<Juegos>& juegos){
                cout << juegos << endl;
            }
    }

//Lita de favoritos, como agregarlo y muestra la lista:
    string AdivinaPalabra::listaDeFavoritos(){
    int desicionJugador;
    string desicionFavoritos;
    
    cout << "Para usar el jugador 1, pulsa el numero 1" << endl;
    cout << "Para usar el jugador 2, pulsa el numero 2" << endl;
    cin >> desicionJugador;

    if (desicionJugador == 1){
        cout << "Usted ha seleccionado el jugador uno \n" << endl;

    list<string> listaVideojuegos = {"Adivina la palabra", "Adivina el animal", "Adivina la profesion"};
    unordered_map<string, int> mapaVideojuegos;

    // Asignando valores numéricos a cada string
    int valor = 1;
    for (const auto& videojuego : listaVideojuegos) {
        mapaVideojuegos[videojuego] = valor++;
    }
     cout << "Usted ha seleccionado el jugador uno" << endl;
        cout << "A continuacion indique el nombre de su juego favorito " << endl;
        cout << "1. Adivina la palabra" << endl;
        cout << "2. Adivina el animal" << endl;
        cout << "3. Adivina la profesion" << endl;
        cin >> desicionFavoritos;

    list<string> juegosFavoritos ={};

    juegosFavoritos.push_back(desicionFavoritos);

    cout << "Su nueva coleecion es " << juegosFavoritos << endl;
}
    
    if (desicionJugador == 2){
        cout << "Usted ha seleccionado el jugador dos" << endl;
        cout << "A continuacion indique el nombre de su juego favorito " << endl;
        cout << "1. Adivina la palabra" << endl;
        cout << "2. Adivina el animal" << endl;
        cout << "3. Adivina la profesion" << endl;
        cin >> desicionFavoritos;


    list<string> juegosFavoritos ={};

    juegosFavoritos.push_back(desicionFavoritos);

    cout << "Su nueva coleecion es " << juegosFavoritos << endl;
}
}

int main() {

}
