#include <iostream>
#include <string>
#include <vector>
#include <list>
#include <algorithm>
#include <map>
#include <unordered_map>

using namespace std;

class AdivinaPalabra {
    // Atributos:
    string nombre;
    int cantidadJugadores;
    string categorias;
    string desarrollador;
    int añoLanzamiento = 2014;
    string plataforma;

public:
    AdivinaPalabra() {} // Constructor Vacio.

    // Los sets:
    void setnombre(string nombre) {
        this->nombre = nombre;
    }
    void setcantidadJugadores(int cantidadJugadores) {
        this->cantidadJugadores = cantidadJugadores;
    }
    void setdesarrollador(string desarrollador) {
        this->desarrollador = desarrollador;
    }
    void setplataforma(string plataforma) {
        this->plataforma = plataforma;
    }
    void setañoLanzamiento(int añoLanzamiento) {
        this->añoLanzamiento = añoLanzamiento;
    }
    void setcategoria(string categorias) {
        this->categorias = categorias;
    }

    // Los gets:
    string getnombre() {
        return nombre;
    }
    int getcantidadJugadores() {
        return cantidadJugadores;
    }
    string getdesarrollador() {
        return desarrollador;
    }
    string getplataforma() {
        return plataforma;
    }
    int getañoLanzamiento() {
        return añoLanzamiento;
    }
    string getcategorias() {
        return categorias;
    }

    // Declaracion de funciones:
    void jugarAdivinaPalabra();
    void AgregarAColeccion();
    string AsignarCategoria();
    string VideojuegosPorTitulo();
    int VideojuegosPorAñoLanzamiento();
    string VideojuegosPorPlataforma();
    void Ordenamiento();

    void jugarAdivinaPalabra(){
        // Inicializa el generador de números aleatorios
        srand(time(NULL));

    list<string> listaAdivinaPalabra;
    list<string> listaAdivinaPistas;
    listaAdivinaPalabra = {"multilistas", "Herencia","Arreglos", "Punteros", "Atributos" };
    listaAdivinaPistas = {"permite accesar la información de manera ordenada a través de campos claves", "Que una clase hija tome los atributos y metodos de otra clase", "Tambien es llamado vector ", "Es una variable que almacena la dirección de memoria de un objeto", "Mecanismo extensible para agregar información declarativa o metadatos con código "};

    auto itPalabra = listaAdivinaPalabra.begin();
    auto itPista = listaAdivinaPistas.begin();

    while(itPalabra != listaAdivinaPalabra.end() && itPista != listaAdivinaPistas.end()) {
        cout << "Palabra: " << *itPalabra << ", Pista: " << *itPista << endl;
        ++itPalabra;
        ++itPista;
    }
    }

};

void AdivinaPalabra::AgregarAColeccion() {
    list<string> coleccion;
    string desicionUsuario;

    cout << "Bienvenido, a su coleccion de videojuegos, si desea agregar un videojuego a su coleccion,\n indique el numero del videojuego que desea agregar a continuacion:" << endl;
    cout << "1. Adivina la palabra" << endl;
    cout << "2. Adivina el animal" << endl;
    cout << "3. Adivina la profesion" << endl;
    cin >> desicionUsuario;

    coleccion.push_back(desicionUsuario);

    cout << "Su nueva coleecion es " << coleccion.size() << endl;
}

string AdivinaPalabra::AsignarCategoria() {
    string desicionCategoria;
    list<string> listaJuegos = {"Adivina la palabra", "Adivina el animal", "Adivina la profesion"};
    list<string> categorias = {"Principiante", "Amateur", "Profesional"};

    cout << "Por favor escoja su categoria: 1. Principiante  2. Amateur  3. Profesional" << endl;
    cin >> desicionCategoria;

    cout << "Su categoria es " << desicionCategoria << endl;

    return desicionCategoria;
}

string AdivinaPalabra::VideojuegosPorTitulo() {
    list<string> listaVideojuegos = {"Adivina la palabra", "Adivina el animal", "Adivina la profesion"};

    listaVideojuegos.sort();

    for (const auto& videojuego : listaVideojuegos) {
        cout << videojuego << endl;
    }

    return " "; 
}

int AdivinaPalabra::VideojuegosPorAñoLanzamiento() {
    // Implementación pendiente
    return 0;
}

string AdivinaPalabra::VideojuegosPorPlataforma() {
    // Implementación pendiente
    return "";
}

void AdivinaPalabra::Ordenamiento() {
    // Implementación pendiente
}

//CLASE HIJA 1
class AdivinaAnimal : public AdivinaPalabra {
    list<string> listaAnimales = {"Gato", "Perro", "Caballo", "Leon", "Pajaro"};
    list<string> listaPistas = {"Es un animal domestico, muy reservado", "Es el mejor amigo del hombre", "Es un animal usado en batalla", "Es el rey de la selva", "Puede volar"};
    unordered_map<string, string> mapaAnimalesPistas;

public:
    AdivinaAnimal() {
        auto itAnimal = listaAnimales.begin();
        auto itPista = listaPistas.begin();
        while (itAnimal != listaAnimales.end() && itPista != listaPistas.end()) {
            mapaAnimalesPistas[*itAnimal] = *itPista;
            ++itAnimal;
            ++itPista;
        }
    }
};


int main() {

}
